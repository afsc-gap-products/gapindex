[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 gapindex authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/background_equations.html","id":"data-collection-process","dir":"Articles","previous_headings":"","what":"Data Collection Process","title":"Background: Mathematical Methods","text":"station (indexed jj) contained stratum (indexed ii), total catch weight numbers recorded fish invertebrate taxa estimation total biomass abundance. subset fish invertebrate taxa, lengths either individuals subsample representative individuals recorded estimation size composition. Individuals second level subsampling length subsample aged calculation age-length key, used expand length subsample complete length- age-distribution sampled area.","code":""},{"path":"/articles/background_equations.html","id":"catch-rates","dir":"Articles","previous_headings":"","what":"Catch Rates","title":"Background: Mathematical Methods","text":"trawl catch weights numbers standardized using area swept trawl, EijE_{ij}, station jj stratum ii. WijkW_{ijk} total catch weight taxon kk station jj stratum ii. RijkR_{ijk} total catch weight per area swept (also known “weight-CPUE”, units kg/km2kg/km^2) taxon kk station jj stratum ii: Rijk=WijkEijR_{ijk} = \\frac{W_{ijk}}{E_{ij}} NijkN_{ijk} total numerical catch taxon kk station jj stratum ii enumerated either directly every individual caught trawl sample expanded representative subsample individuals. case subsample taken, expanded total numerical catch (N̂ijk)(\\hat N_{ijk}) estimated dividing total catch weight mean individual weight hijkh_{ijk}: N̂ijk=Wijkĥijk\\hat N_{ijk} = \\frac{W_{ijk}}{\\hat h_{ijk}} hijk=wijksijkh_{ijk} = \\frac{w_{ijk}}{s_{ijk}} wijkw_{ijk} sijks_{ijk} total subsampled weight numbers taxon kk station jj stratum ii. estimate numerical catch per area trawled (also known “numerical CPUE”, units /km2no/km^2) calculated similar weight-CPUE: Ŝijk=N̂ijkEij\\hat S_{ijk} = \\frac{\\hat N_{ijk}}{E_{ij}}","code":""},{"path":"/articles/background_equations.html","id":"biomass-and-abundance-calculations","dir":"Articles","previous_headings":"","what":"Biomass and Abundance Calculations","title":"Background: Mathematical Methods","text":"Total estimated biomass abundance (associated estimated variances) taxon kk stratum ii product average CPUE area stratum ii (AiA_i): B̂ik=AiR‾ik\\hat B_{ik} = A_i \\bar R_{ik} R‾ik=∑j=1niRijkni\\bar R_{ik} = \\frac{\\sum_{j = 1}^{n_i} R_{ijk}}{n_i} estimated variance: Var̂(B̂ik)=Ai2Var̂(R‾ik)\\hat{Var}(\\hat B_{ik}) = A_i^2 \\hat{Var}(\\bar R_{ik}) Var̂(R‾ik)=∑j=1ni(Rijk−R‾ik)2ni(ni−1)\\hat{Var} (\\bar R_{ik}) = \\frac{\\sum\\limits_{j=1}^{n_i} (R_{ijk} - \\bar R_{ik})^2 }{n_i(n_i-1)} Since strata independent, total biomass variance estimates across subarea entire survey region calculated sum stratum-level estimates total biomass variance estimates, respectively, contained within subarea region. example, total estimated biomass entire survey area : B̂k=∑=1IB̂ik\\hat B_{k} = \\sum\\limits_{=1}^\\hat B_{ik} II total number strata, estimated variance: Var(B̂k)=∑=1IVar(B̂ik)Var(\\hat B_{k}) = \\sum\\limits_{=1}^Var(\\hat B_{ik}) Total abundance (P̂k\\hat P_{k}) calculated similar total biomass, replacing weight-CPUE numerical CPUE.","code":""},{"path":"/articles/background_equations.html","id":"size-composition","dir":"Articles","previous_headings":"","what":"Size Composition","title":"Background: Mathematical Methods","text":"subset taxa, individuals (subsampled individuals) taxon kk station jj stratum ii lengthed nearest 1-cm bin (indexed ll) classified sex, indexed mm 1 = Male, 2 = Female, 3 = Unsexed (sijklms_{ijklm}). recording unsexed individuals occurs either sex individual determined sex individual collected. calculation size composition comes two expansions. First, proportion observed individuals sex mm length bin ll taxon kk station jj stratum ii (zijklmz_{ijklm}) used expand length-frequency subsample total numbers individuals per area swept (Ŝijk\\hat S_{ijk}) calculate estimated number per area swept individuals sex mm length bin ll taxon kk station jj stratum ii (Ŝijklm\\hat S_{ijklm}). zijklm=sijklm∑m=13∑l=1Lijkmsijklmz_{ijklm} = \\frac{s_{ijklm}} {\\sum\\limits_{m=1}^3\\sum\\limits_{l=1}^{L_{ijkm}} s_{ijklm} } Ŝijklm=Ŝijkzijklm\\hat S_{ijklm} = \\hat S_{ijk} z_{ijklm} LijkmL_{ijkm} maximum length bin observed taxon kk, sex mm station jj stratum ii. Second, Ŝijklm\\hat S_{ijklm} expanded total estimated stratum-level numerical abundance calculate estimated number individuals sex mm length bin ll taxon kk stratum ii (P̂iklm\\hat P_{iklm}) P̂iklm=P̂ik∑j=1niŜijklm∑j=1ni∑m=13∑l=1LŜijklm\\hat P_{iklm} = \\hat P_{ik} \\frac{\\sum\\limits_{j=1}^{n_i} \\hat S_{ijklm}} {\\sum\\limits_{j=1}^{n_i}\\sum\\limits_{m=1}^3\\sum\\limits_{l=1}^{L} \\hat S_{ijklm} } Bering Sea survey regions, hauls associated length-frequency data included size composition calculations. GOA AI “average size composition” z‾iklm\\bar z_{iklm} computed using hauls stratum year used impute size composition haul: z‾iklm=∑j=1nisijklm∑m=13∑l=1Likm∑j=1nisijklm \\bar z_{iklm} = \\frac{\\sum\\limits_{j=1}^{n_i} s_{ijklm}}{\\sum\\limits_{m=1}^{3}\\sum\\limits_{l=1}^{L_{ikm}}\\sum\\limits_{j=1}^{n_i} s_{ijklm}}","code":""},{"path":"/articles/background_equations.html","id":"age-composition","dir":"Articles","previous_headings":"","what":"Age Composition","title":"Background: Mathematical Methods","text":"Within haul, second subsample drawn length subsample collect otoliths determining individual age, indexed xx. number observed individuals age xx, sex mm, length bin ll, taxon kk, station jj stratum ii vijklmxv_{ijklmx}. age-length key characterizing proportion ages taxon kk, length bin ll, sex mm created pooling age data across stations strata within given survey region (yklmxy_{klmx}). yklmx=vklmx∑x=1Xklmvklmxy_{klmx} = \\frac{v_{klmx}}{\\sum\\limits_{x=1}^{X_{klm}} v_{klmx}} XklmX_{klm} oldest age taxon kk length bin ll sex mm. age-length key used transform size compositions age compositions, total number individuals age xx, sex mm, taxon kk stratum ii(Ŷikmx)(\\hat Y_{ikmx}). Ŷiklmx=P̂iklmyklmx\\hat Y_{iklmx} = \\hat P_{iklm}y_{klmx} Ŷikmx=∑l=1LikmŶiklmx\\hat Y_{ikmx} = \\sum\\limits_{l = 1}^{L_{ikm}}\\hat Y_{iklmx} estimated mean length (mm) age xx sex mm taxon kk stratum ii(d‾ikmx)(\\bar d_{ikmx}) weighted average length using distribution Ŷiklmx\\hat Y_{iklmx} across length bins weights. d‾ikmx=Ŷiklmxdl∑l=1LijkmŶiklmx\\bar d_{ikmx} = \\frac{\\hat Y_{iklmx}d_l}{\\sum\\limits_{l=1}^{L_{ijkm}} \\hat Y_{iklmx}} dld_l length value associated length bin ll, estimated weighted variance: Var̂(d‾ikmx)=∑l=1Lijkm(Ŷiklmx∑l=1LŶiklmx(dl−d‾ikmx)2)\\hat {Var}(\\bar d_{ikmx}) = \\sum\\limits_{l=1}^{L_{ijkm}} (\\frac{\\hat Y_{iklmx}}{\\sum\\limits_{l=1}^L \\hat Y_{iklmx}} (d_l - \\bar d_{ikmx})^2)","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zack Oyafuso. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oyafuso Z (2025). gapindex: Standard AFSC GAP Product Calculations. R package version 3.0.3.","code":"@Manual{,   title = {gapindex: Standard AFSC GAP Product Calculations},   author = {Zack Oyafuso},   year = {2025},   note = {R package version 3.0.3}, }"},{"path":[]},{"path":"/index.html","id":"welcome","dir":"","previous_headings":"","what":"Welcome","title":"Standard AFSC GAP Product Calculations","text":"R package generates standard design-based indices biomass, abundance, size composition, age composition NOAA-NMFS-AFSC-RACE-GAP bottom trawl survey data. Survey regions include: Gulf Alaska (1990), Aleutian Islands (1991), Eastern Bering Sea Shelf (1982), Eastern Bering Sea Slope (2002), Northern Bering Sea Shelf (2010).","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"Standard AFSC GAP Product Calculations","text":"addition default packages R (base, stats), functions gapindex use functions five additional packages: RODBC: Enables ODBC (Open Database Connectivity) interface AFSC Oracle database survey data housed getPass: Allows masking Oracle user credentials (usernames, passwords) accessing RODBC keyring: Allows option users store passwords lifecycle: Aids developers users shared conventions, documentation badges, deprecation warnings package develops time data.table: Speeds data.frame manipulations like reading, writing, aggregations, joins, ordering, sorting. Please make sure five packages installed installing gapindex","code":"devtools::install_github(\"afsc-gap-products/gapindex\")"},{"path":"/index.html","id":"collaborators","dir":"","previous_headings":"","what":"Collaborators","title":"Standard AFSC GAP Product Calculations","text":"gapindex R package product two AFSC-RACE-GAP working groups regarding GAP data processes index computation. Many thanks participated working groups:","code":""},{"path":"/index.html","id":"legacy","dir":"","previous_headings":"","what":"Legacy","title":"Standard AFSC GAP Product Calculations","text":"non-exhaustive list people provided foundation many functions package: AI-GOA: Michael Martin, Peter Munro, Ned Laman Bering Sea: REM, Jason Conner, Jerry Hoff, Rebecca Haehn Many index calculations Wakabayashi et al. (1985): Wakabayashi, K., R. G. Bakkala, M. S. Alton. 1985. Methods U.S.-Japan demersal trawl surveys, p. 7-29. R. G. Bakkala K. Wakabayashi (editors), Results cooperative U.S.-Japan groundfish investigations Bering Sea May-August 1979. Int. North Pac. Fish. Comm. Bull. 44.","code":""},{"path":"/index.html","id":"organization-acronymns","dir":"","previous_headings":"","what":"Organization Acronymns","title":"Standard AFSC GAP Product Calculations","text":"NOAA: National Oceanic Atmospheric Administration NMFS: National Marine Fisheries Service AFSC: Alaska Fisheries Science Center RACE: Resource Assessment Conservation Engineering Division GAP: Groundfish Assessment Program","code":""},{"path":"/index.html","id":"legal-disclaimer","dir":"","previous_headings":"","what":"Legal disclaimer","title":"Standard AFSC GAP Product Calculations","text":"repository software product official communication National Oceanic Atmospheric Administration (NOAA), United States Department Commerce (DOC). NOAA GitHub project code provided ‘’ basis user assumes responsibility use. claims DOC DOC bureaus stemming use GitHub project governed applicable Federal law. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation, favoring DOC. DOC seal logo, seal logo DOC bureau, shall used manner imply endorsement commercial product activity DOC United States Government.","code":""},{"path":"/reference/calc_ALK.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate age-length key (alk) — calc_alk","title":"Calculate age-length key (alk) — calc_alk","text":"Calculates empircal probability age length collected otolith data.","code":""},{"path":"/reference/calc_ALK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate age-length key (alk) — calc_alk","text":"","code":"calc_alk(   gapdata = NULL,   racebase_tables = lifecycle::deprecated(),   unsex = c(\"all\", \"unsex\")[2],   global = TRUE )"},{"path":"/reference/calc_ALK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate age-length key (alk) — calc_alk","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead. unsex string, option determine unsexed individuals treated. Option \"\" means unsexed alks determined combining sexes (males, females, unsexed) option used standard design-based composition production. Option \"unsex\" means unsexed alk determined unsexed individuals option used creating data inputs model-based age composition indices. Defaults \"unsex\" global boolean. missing length bins filled using alk consisting years? Defaults TRUE.","code":""},{"path":"/reference/calc_ALK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate age-length key (alk) — calc_alk","text":"dataframe probabilities (\"AGE_FRAC\") ages (\"AGE\") length (LENGTH_MM) given survey (\"SURVEY\"), year (\"YEAR\"), species (SPECIES_CODE), sex (SEX).","code":""},{"path":"/reference/calc_agecomp_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate region-level age composition and mean/std.dev length at age — calc_agecomp_region","title":"Calculate region-level age composition and mean/std.dev length at age — calc_agecomp_region","text":"Calculate region-level age composition mean/std.dev length age","code":""},{"path":"/reference/calc_agecomp_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate region-level age composition and mean/std.dev length at age — calc_agecomp_region","text":"","code":"calc_agecomp_region(   gapdata = NULL,   racebase_tables = lifecycle::deprecated(),   agecomp_stratum = NULL,   age_comps_stratum = lifecycle::deprecated() )"},{"path":"/reference/calc_agecomp_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate region-level age composition and mean/std.dev length at age — calc_agecomp_region","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead. agecomp_stratum named list stratum age comps numbers survey/year/stratum/sex/length, result object gapindex::calc_agecomp_stratum(). age_comps_stratum Use agecomp_stratum argument instead.","code":""},{"path":"/reference/calc_agecomp_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate region-level age composition and mean/std.dev length at age — calc_agecomp_region","text":"dataframe age composition mean/standard deviation length age aggregated across regions.","code":""},{"path":"/reference/calc_agecomp_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stratum-level age composition and mean/std.dev length at age — calc_agecomp_stratum","title":"Calculate stratum-level age composition and mean/std.dev length at age — calc_agecomp_stratum","text":"Calculate stratum-level age composition mean/std.dev length age","code":""},{"path":"/reference/calc_agecomp_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stratum-level age composition and mean/std.dev length at age — calc_agecomp_stratum","text":"","code":"calc_agecomp_stratum(   gapdata = NULL,   racebase_tables = lifecycle::deprecated(),   alk = NULL,   sizecomp_stratum = NULL,   size_comp = lifecycle::deprecated() )"},{"path":"/reference/calc_agecomp_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stratum-level age composition and mean/std.dev length at age — calc_agecomp_stratum","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead. alk age-length key (dataframe) created gapindex::calc_alk() sizecomp_stratum dataframe size compositions created gapindex::calc_sizecomp_stratum(). size_comp Use sizecomp_stratum argument instead.","code":""},{"path":"/reference/calc_agecomp_stratum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stratum-level age composition and mean/std.dev length at age — calc_agecomp_stratum","text":"named list two elements. \"age_comp\" dataframe numbers age survey, year, stratum, species, sex. table column name descriptions coming soon.\"length_at_age\" support table gapindex::calc_agecomp_region() function used.","code":""},{"path":"/reference/calc_biomass_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate index of total biomass per stratum — calc_biomass_stratum","title":"Calculate index of total biomass per stratum — calc_biomass_stratum","text":"Calculate index total biomass per stratum","code":""},{"path":"/reference/calc_biomass_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate index of total biomass per stratum — calc_biomass_stratum","text":"","code":"calc_biomass_stratum(   gapdata = NULL,   racebase_tables = lifecycle::deprecated(),   cpue = NULL )"},{"path":"/reference/calc_biomass_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate index of total biomass per stratum — calc_biomass_stratum","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead. cpue object created gapindex::calc_cpue().","code":""},{"path":[]},{"path":"/reference/calc_biomass_subarea.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate index of total biomass across aggregated subareas — calc_biomass_subarea","title":"Calculate index of total biomass across aggregated subareas — calc_biomass_subarea","text":"Calculate index total biomass across aggregated subareas","code":""},{"path":"/reference/calc_biomass_subarea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate index of total biomass across aggregated subareas — calc_biomass_subarea","text":"","code":"calc_biomass_subarea(   racebase_tables = lifecycle::deprecated(),   gapdata = NULL,   biomass_strata = lifecycle::deprecated(),   biomass_stratum = NULL )"},{"path":"/reference/calc_biomass_subarea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate index of total biomass across aggregated subareas — calc_biomass_subarea","text":"racebase_tables Use gapdata argument instead. gapdata data object created gapindex::get_data() biomass_strata Use biomass_stratum argument instead. biomass_stratum dataframe stratum biomass, result object gapindex::calc_biomass_stratum()","code":""},{"path":[]},{"path":"/reference/calc_cpue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate haul-level catch per unit effort — calc_cpue","title":"Calculate haul-level catch per unit effort — calc_cpue","text":"function calculates zero-fills weight numerical catch per unit effort (area swept, km2)","code":""},{"path":"/reference/calc_cpue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate haul-level catch per unit effort — calc_cpue","text":"","code":"calc_cpue(gapdata = NULL, racebase_tables = lifecycle::deprecated())"},{"path":"/reference/calc_cpue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate haul-level catch per unit effort — calc_cpue","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead.","code":""},{"path":[]},{"path":"/reference/calc_sizecomp_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate numerical CPUE at length by haul — calc_sizecomp_stratum","title":"Calculate numerical CPUE at length by haul — calc_sizecomp_stratum","text":"Uses Equation 16 Wakabayashi et al. 1985 calculate numbers-catch-per-unit-effort (CPUE, Numbers/km2) length.","code":""},{"path":"/reference/calc_sizecomp_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate numerical CPUE at length by haul — calc_sizecomp_stratum","text":"","code":"calc_sizecomp_stratum(   racebase_tables = deprecated(),   gapdata = NULL,   racebase_cpue = deprecated(),   cpue = NULL,   racebase_stratum_popn = deprecated(),   abundance_stratum = NULL,   spatial_level = c(\"stratum\", \"haul\")[1],   fill_NA_method = c(\"AIGOA\", \"BS\")[1] )"},{"path":"/reference/calc_sizecomp_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate numerical CPUE at length by haul — calc_sizecomp_stratum","text":"racebase_tables Use gapdata argument instead. gapdata data object created gapindex::get_data() racebase_cpue Use cpue argument instead. cpue catch per unit effort object created gapindex::calc_cpue(). racebase_stratum_popn Use abundance_stratum argument instead. abundance_stratum biomass/abundance stratum object created gapindex::calc_biomass_stratum() spatial_level string, one c(\"stratum\", \"haul\"). size compositions calculated level \"stratum\" (used standard size compositions) \"haul\" (used ModSquad model-based data-inputs). fill_NA_method string, one c(\"AIGOA\", \"BS\"). argument changes way hauls positive weights associated size data dealt . EBS, NBS, BSS survey regions (\"BS\"), hauls contribute dummy length -9 category respective strata. AI GOA survey regions (\"AIGOA\"), average size distribution applied hauls length -9 category exist AI GOA versions size composition.","code":""},{"path":[]},{"path":"/reference/calc_sizecomp_subarea.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate size composition across aggregated subareas — calc_sizecomp_subarea","title":"Calculate size composition across aggregated subareas — calc_sizecomp_subarea","text":"Calculate size composition across aggregated subareas","code":""},{"path":"/reference/calc_sizecomp_subarea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate size composition across aggregated subareas — calc_sizecomp_subarea","text":"","code":"calc_sizecomp_subarea(   gapdata = NULL,   racebase_tables = lifecycle::deprecated(),   sizecomp_stratum = NULL,   size_comps = lifecycle::deprecated() )"},{"path":"/reference/calc_sizecomp_subarea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate size composition across aggregated subareas — calc_sizecomp_subarea","text":"gapdata data object created gapindex::get_data() racebase_tables Use gapdata argument instead. sizecomp_stratum dataframe stratum biomass, result object either gapindex::calc_sizecomp_aigoa_stratum() gapindex::calc_sizecomp_bs_stratum() size_comps Use sizecomp_stratum argument instead.","code":""},{"path":[]},{"path":"/reference/gapindex-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gapindex: Standard AFSC GAP Product Calculations — gapindex-package","title":"gapindex: Standard AFSC GAP Product Calculations — gapindex-package","text":"package contains functions calculate standard NOAA AFSC GAP summer groundfish bottom trawl survey data products (CPUE, Biomass, Size Composition, Age Composition) Gulf Alaska (1990-current), Aleutian Islands (1991-current), Eastern Bering Sea Shelf (1982-current), Northern Bering Sea Shelf (2010-current), Eastern Bering Sea Slope (2002-2016).","code":""},{"path":"/reference/gapindex-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gapindex: Standard AFSC GAP Product Calculations — gapindex-package","text":"Maintainer: Zack Oyafuso zack.oyafuso@noaa.gov","code":""},{"path":"/reference/get_connected.html","id":null,"dir":"Reference","previous_headings":"","what":"Define RODBC connection to Oracle — get_connected","title":"Define RODBC connection to Oracle — get_connected","text":"Creates RODBC connection Oracle needed pull SQL queries RACE database. Make sure connected VPN running function. Also support users use Rpackage keyring store usernames passwords.","code":""},{"path":"/reference/get_connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define RODBC connection to Oracle — get_connected","text":"","code":"get_connected(db = \"AFSC\", check_access = TRUE)"},{"path":"/reference/get_connected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define RODBC connection to Oracle — get_connected","text":"db string. registered data source name, case \"AFSC\" default. argument passed dsn argument RODBC::odbcConnect() check_access boolean. TRUE (default), checks whether specific tables GAP_PRODUCTS, RACEBASE RACE_DATA used gapindex package. Outputs error user access tables message point contact information access.","code":""},{"path":"/reference/get_connected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define RODBC connection to Oracle — get_connected","text":"channel class \"RODBC\". See ?RODBC::odbcConnect() detail","code":""},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull AFSC GAP BTS survey data — get_data","title":"Pull AFSC GAP BTS survey data — get_data","text":"Pulls survey, cruise, haul, catch, size, specimen (age), stratum, subarea, stratum grouping information region, years, species interest RACEBASE, RACE_DATA, GAP_PRODUCTS schemata AFSC Oracle database.","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull AFSC GAP BTS survey data — get_data","text":"","code":"get_data(   year_set = c(1996, 1999),   survey_set = c(\"GOA\", \"AI\", \"EBS\", \"NBS\", \"BSS\")[1],   spp_codes = c(21720, 30060, 10110),   haul_type = 3,   abundance_haul = c(\"Y\", \"N\")[1],   pull_lengths = FALSE,   taxonomic_source = c(\"RACEBASE.SPECIES_CLASSIFICATION\",     \"GAP_PRODUCTS.TAXONOMIC_CLASSIFICATION\")[1],   remove_na_strata = FALSE,   na_rm_strata = lifecycle::deprecated(),   channel = NULL,   sql_channel = lifecycle::deprecated() )"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull AFSC GAP BTS survey data — get_data","text":"year_set numeric integer vector years survey_set character string. One c(\"GOA\", \"AI\", \"EBS\", \"NBS\", \"BSS\"). spp_codes two-column data.frame species codes (column name SPECIES_CODE) GROUP_CODE name (column name GROUP_CODE). single-species, GROUP_CODE species codes can . Examples: 1) mixture individual taxa taxon groups: data.frame(\"SPECIES_CODE\" = c(21720, 21220, 21230, 21232), \"GROUP_CODE\" = c(21720, \"Grenadiers\", \"Grenadiers\", \"Grenadiers\")) 2) single taxa: c(21720, 21740, 10110) 3) PRODUCTION PURPOSES: NULL value default uses GAP_PRODUCTS.TAXON_GROUPS AFSC Oracle database. haul_type integer. Defaults haul type \"3\" \"standard bottom sample (preprogrammed station)\" used production purposes. abundance_haul character string. \"Y\" standardized hauls used production \"N\" non-standard hauls due bad performance, different gear, etc. pull_lengths boolean T/F. length specimen data pulled? Defaults FALSE speed. taxonomic_source character string. Table used source taxonomic information. One two options: \"RACEBASE.SPECIES\" (default) \"GAP_PRODUCTS.TAXONOMIC_CLASSIFICATION\". \"GAP_PRODUCTS.TAXONOMIC_CLASSIFICATION\" still provisional table option testing . remove_na_strata boolean. Remove hauls NA stratum information. Defaults FALSE. na_rm_strata Use remove_na_strata argument instead. channel connection Oracle created via gapindex::get_connected() RODBC::odbcConnect(). sql_channel Use channel argument instead.","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull AFSC GAP BTS survey data — get_data","text":"named list containing survey_design, survey, cruise, haul, catch, size (pull_lengths == TRUE), specimen (pull_lengths == TRUE), species, stratum, subarea, stratum_groups information survey, years, species interest.","code":""},{"path":"/reference/get_station_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull station/grid data — get_station_info","title":"Pull station/grid data — get_station_info","text":"Pull station/grid data","code":""},{"path":"/reference/get_station_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull station/grid data — get_station_info","text":"","code":"get_station_info(   region = NULL,   channel = NULL,   sql_channel = lifecycle::deprecated() )"},{"path":"/reference/get_station_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull station/grid data — get_station_info","text":"region Survey region (GOA, AI, EBS, NBS) channel connection Oracle created via gapindex::get_connected() RODBC::odbcConnect(). sql_channel Use channel argument instead.","code":""},{"path":"/reference/get_station_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull station/grid data — get_station_info","text":"dataframe containing station information specified survey. request data EBS survey, columns dataframe STATIONID, LATITUDE, LONGITUDE, STRATUM. AI GOA, columns AIGRID_ID, TRAWLABLE, STRATUM, STATIONID, CENTER_LAT, CENTER_LONG, SOUTH_LAT, EAST_LONG, WEST_LONG.","code":""},{"path":"/reference/remove_temp_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Temporary Tables Created within the get_data() call — remove_temp_tables","title":"Drop Temporary Tables Created within the get_data() call — remove_temp_tables","text":"#' @param channel      connection Oracle created via gapindex::get_connected() RODBC::odbcConnect().","code":""},{"path":"/reference/remove_temp_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Temporary Tables Created within the get_data() call — remove_temp_tables","text":"","code":"remove_temp_tables(channel)"},{"path":"/reference/stitch_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to format sql queries — stitch_entries","title":"Helper function to format sql queries — stitch_entries","text":"Helper function format sql queries","code":""},{"path":"/reference/stitch_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to format sql queries — stitch_entries","text":"","code":"stitch_entries(stitch_what = \"\")"},{"path":"/reference/stitch_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to format sql queries — stitch_entries","text":"stitch_what string values stitch","code":""},{"path":"/reference/stitch_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to format sql queries — stitch_entries","text":"single string encapsulates values stitch_what parenthesis.","code":""},{"path":"/reference/upload_oracle.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a table to Oracle with associated metadata — upload_oracle","title":"Upload a table to Oracle with associated metadata — upload_oracle","text":"Upload table Oracle associated metadata","code":""},{"path":"/reference/upload_oracle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a table to Oracle with associated metadata — upload_oracle","text":"","code":"upload_oracle(   x = NULL,   table_name = NULL,   metadata_column = NULL,   table_metadata = NULL,   channel = NULL,   schema = NULL,   share_with_all_users = TRUE )"},{"path":"/reference/upload_oracle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a table to Oracle with associated metadata — upload_oracle","text":"x Either character string path .csv file data.frame table upload. table_name Name table. (Add error checks make sure table name follows peculiarities Oracle tables). metadata_column data.frame describing metadata fields table. Must contain columns: 1) colname: name field 2) colname_long: longer version name printing purposes. 3) units: units field 4) dataype: Oracle data type 5) colname_desc: Full description field table_metadata Description table . channel Establish oracle connection using function like gapindex::get_connected(). schema character string. name schema save table. share_with_all_users boolean. Default = TRUE. Give users Oracle select permissions.","code":""},{"path":"/news/index.html","id":"gapindex-220","dir":"Changelog","previous_headings":"","what":"gapindex 2.2.0","title":"gapindex 2.2.0","text":"Modified get_connected() function specify user enter AFSC Oracle database credentials, per issue #45. Also added functionality integrating keyring R package input credentials, per commit 3f9e0b3aaace9c377130762f76fadddd6acfcfd6. Also added check make sure user access relevant tables RACEBASE RACE_DATA schemata error message contact nmfs.afsc.gap.metadata@@noaa.gov, per commit 1505097. added taxonomic_source argument get_data() function allow users toggle using RACEBASE vs GAP_PRODUCTS taxonomic information, per commit 9544050558c060db33579c0fc76aecf9af5ab12b. Defaults RACEBASE.SPECIES.","code":""}]
